install.packages("jsonlite")
setwd("/Users/mattmartin/Documents/Graduate School/Dissertation/Data/Cuba")
json_data <- fromJSON("whisperx_output.json")
library(jsonlite)
json_data <- fromJSON("whisperx_output.json")
View(json_data)
json_data <- fromJSON("whisperx_output.json", flatten = TRUE)
json_data <- fromJSON("whisperx_output.json", flatten = TRUE)
View(json_data)
library(jsonlite)
json_data <- fromJSON("whisperx_output.json", flatten = TRUE)
json_data <- json_data[[1]]
json_data <- json_data[[2]]
json_data <- json_data[[1]]
library(jsonlite)
json_data <- fromJSON("whisperx_output.json", flatten = TRUE)
json_data <- json_data[[1]]
dataframe <- as.data.frame(json_data[[1]])
View(dataframe)
json_data <- json_data[[1]]
json_data <- json_data[[1]]
library(jsonlite)
json_data <- fromJSON("whisperx_output.json", flatten = TRUE)
json_data <- json_data[[1]]
G <- fromJSON("Georgia.json", flatten = TRUE)
G <- fromJSON("Georgina.json", flatten = TRUE)
Georgina <- G[[1]]
View(Georgina)
library(leaflet)
install.packages("leaflet")
library(leaflet)
borders <- readLines("files/borders.json")
leaflet() %>%
addTiles() %>%
addTimeline(
start = "1974-01-01",
end = "2021-12-31",
position = "bottom",
dateLabels = "year",
options = timelineOptions(editable = TRUE)  # Customize timeline appearance
)
quarto_version()
quarto --version
library(quarto)
install.packages("quarto")
quarto --version
library(quarto)
quarto --version
quarto_version()
install.packages("downlit")
install.packages("xml2")
packageVersion("quarto")
if ("lightbox" %in% installed.packages()) {
message("Lightbox is installed.")
} else {
message("Lightbox is not installed.")
}
install.packages("lightbox")
quarto add quarto-ext/lightbox
library(jsonlite)
library(officer)
# import .json file
df <- fromJSON("/Users/mattmartin/Documents/Graduate School/Dissertation/Data/Loreta_Vidal.json", flatten = TRUE)
transcript_df <- df[[1]]
# Convert seconds to minutes and seconds separately
transcript_df$start_min <- floor(transcript_df$start / 60)  # Extract minutes
transcript_df$start_sec <- transcript_df$start %% 60        # Extract remaining seconds
transcript_df$end_min <- floor(transcript_df$end / 60)      # Extract minutes
transcript_df$end_sec <- transcript_df$end %% 60            # Extract remaining seconds
# Create a new Word document
doc <- read_docx()
# Iterate through each row in the data frame
for (i in 1:nrow(transcript_df)) {
speaker <- transcript_df$speaker[i]
text <- transcript_df$text[i]
start_min <- transcript_df$start_min[i]
start_sec <- as.numeric(transcript_df$start_sec[i])  # Convert to numeric
end_min <- transcript_df$end_min[i]
end_sec <- as.numeric(transcript_df$end_sec[i])      # Convert to numeric
# Format the content as needed
formatted_content <- paste(speaker, "(", start_min, ":", sprintf("%02.0f", start_sec), "-", end_min, ":", sprintf("%02.0f", end_sec), "): ", text, sep = "")
# Add the formatted content to the Word document
doc <- doc |>
body_add_par(value = formatted_content)
# Add space between paragraphs
doc <- doc |>
body_add_par(value = "")
}
# Save the Word document
output_file <- "Loreto_Vidal.docx"
print(doc, target = output_file)
install.packages(c("Amelia", "av", "bayestestR", "bit", "bit64", "class", "cluster", "cpp11", "curl", "data.table", "datawizard", "evaluate", "flextable", "fontawesome", "foreign", "fs", "gdtools", "gtable", "Hmisc", "igraph", "insight", "KernSmooth", "knitr", "later", "lme4", "lubridate", "maps", "marginaleffects", "MASS", "mice", "missRanger", "nnet", "officer", "openssl", "parameters", "performance", "pillar", "pkgbuild", "processx", "promises", "ps", "R.oo", "ranger", "Rcpp", "RcppArmadillo", "rlang", "rmarkdown", "rpart", "RSQLite", "rstudioapi", "shiny", "spatial", "stringdist", "survival", "systemfonts", "testthat", "textshaping", "tinytable", "tinytex", "waldo", "withr", "xfun", "xts"))
